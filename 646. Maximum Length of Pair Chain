//Use dynamic programming to save the longest chain at current pair(recusion will have many repeated counts)

class Solution {
public:
    static bool cmp(const vector<int> a, const vector<int> b) {
        return a[0]<b[0];
    }
    
    int findLongestChain(vector<vector<int>>& pairs) {
        sort(pairs.begin(),pairs.end(),cmp);
        
        int size = pairs.size();
        int dp[size]; //state to save longest chain ending at current pos
        
        //initialize state
        for(int i = 0; i < size; i++){
            dp[i] = 1;
        }
        
        //state transfer
        for(int i = 1; i < size; i++){
            for(int j = 0; j < i; j++){
                if(pairs[i][0] > pairs[j][1]){
                    dp[i] = max(dp[i], dp[j]+1);
                }
            }
        }
        
        int result = 1;
        for(int i = 1; i < size; i++){
            result = max(result,dp[i]);
        }
        
        return result;
    }
    

};
