class Solution {
public:
    int findIntegers(int num) {
        //convert the integer to binary and save in string
        string str_num;
        while(num){
            str_num.push_back(num % 2 + '0');
            num /= 2;
        }
        
        int size = str_num.size();
        vector<int> dp0(size, 0); //the number of integers when current bit set to 0
        vector<int> dp1(size, 0); //the number of integers when current bit set to 1
        
        //initial state
        dp0[0] = 1;
        dp1[0] = 1;
        
        //state transfer to get integers without consecutive 1s
        for(int i = 1; i < size; i++){
            dp0[i] = dp0[i - 1] + dp1[i - 1];
            dp1[i] = dp0[i - 1];
        }
        int cnt = dp0[size - 1] + dp1[size - 1];
        
        //substract those greater than the given integer
        for (int i = size - 2; i >= 0; i--) {
            if (str_num[i] == '1' && str_num[i + 1] == '1') { //if 11 then all the rest are less than the given integer
                break;
            }
            if (str_num[i] == '0' && str_num[i + 1] == '0') { //if 00 then substrace the case of 01
                cnt -= dp1[i];
            }
        }
        return cnt;
    }
};
