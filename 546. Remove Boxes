https://leetcode.com/problems/remove-boxes/description/

class Solution {
public:
    int removeBoxes(vector<int>& boxes) {
        int size = boxes.size(); 
        
        int dp[100][100][100]={0};
        return dfs(boxes, dp, 0, size-1, 0);
    }
    
    int dfs(vector<int> &box, int dp[100][100][100], int left, int right, int length){
        if(left > right) return 0;
        if(dp[left][right][length]!=0) return dp[left][right][length]; //already calculated, return directly
        
        //delete the most right element
        int count = 1;
        while(left < right && box[right]==box[right-1]){
            right--;
            length++;
        }
        dp[left][right][length] = dfs(box, dp, left, right-1, 0) + (length+1)*(length+1);
        
        for(int i = left; i < right; i++){
            if(box[i]!=box[right]) continue;
            
            dp[left][right][length] = max(dp[left][right][length], dfs(box,dp,i+1,right-1,0) + dfs(box,dp,left,i,length+1));
            
        }
        return dp[left][right][length];
    }
};
